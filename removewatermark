#!/usr/bin/env python3
import io
import os
import re
import subprocess
import sys
import time
import shutil
import argparse

from tempfile import NamedTemporaryFile
from os import path

objstart = re.compile(br'^\d+ \d+ obj\s*$')
content = re.compile(br'^(/Contents \[[^\]]*) \d+ \d+ R]$', re.MULTILINE | re.DOTALL)


def writebuffer(fh, buffer):
    for line in buffer:
        fh.write(line)

def remove_watermark_objects(infile, outfile, needle):
    '''Searches through infile for needle and removes its innermost containing object.
    Writes to outfile. infile must have been opened in binary mode and outfile must
    have been opened in binary mode.'''
    buffer = []
    for line in infile.readlines():
        # Note that this will only ever strip the innermost object
        # We don't deal with nested objects and so cannot strip an
        # outer object
        if not line.startswith(b'endobj'):
            buffer.append(line)
        else:
            foundneedle = False
            bstring = b''.join(buffer)
            if needle in bstring:
                for i in range(len(buffer) - 1, -1, -1):
                    if objstart.match(buffer[i]):
                        foundneedle = True
                        writebuffer(outfile, buffer[:i])
            if not foundneedle:
                outfile.write(bstring)
            buffer = []
    outfile.write(b''.join(buffer))

def remove_watermark_cambridge(infile, outfile):
    buffer = b''
    for line in infile.readlines():
        buffer += line
        if (len(buffer) > 1024 * 1024):
            outfile.write(re.sub(content, br'\1]', buffer))
            buffer = b''
    outfile.write(re.sub(content, br'\1]', buffer))


def get_outfilename(infilename, overwrite):
    if overwrite:
        return infilename
    if infilename[-4:] == '.pdf':
        return '{}.scrubbed.pdf'.format(infilename[:-4])
    return infilename + '.scrubbed'


if __name__ == '__main__':
    usage = 'Usage: {0} <watermark text> filename [filenames...]\n'.format(
        sys.argv[0])
    # create an ArgumentParser object
    parser = argparse.ArgumentParser(description="remove watermark of input pdf files.")
    parser.add_argument('argv', nargs='*')
    parser.add_argument('--overwrite', action='store_true')
    parser.add_argument('--cambridge', action='store_true')
    parser.add_argument('--nouncompress', action='store_true')
    parser.add_argument('--nocompress', action='store_true')

    args = parser.parse_args()

    try:
        needle = bytes(sys.argv[1], 'latin-1')
    except IndexError:
        sys.stderr.write(usage)
        sys.exit(1)

    if len(sys.argv) < 3:
        sys.stderr.write(usage)
        sys.exit(1)

    overwrite = args.overwrite
    cambridge = args.cambridge
    uncompress = not args.nouncompress
    compress = not args.nocompress

    for filename in args.argv[1:]:
        if not path.exists(filename):
            if not overwrite:
                sys.stderr.write('File does not exist: %s\n' % filename)
            continue

        try:
            if uncompress:
                # 1. Uncompress the file so we can find the watermark text.
                temp1 = NamedTemporaryFile(delete=False)
                temp1.close()
                starttime = time.time()
                exitcode = subprocess.call(
                    ['pdftk', filename, 'output', temp1.name, 'uncompress'])
                if exitcode != 0:
                    sys.stderr.write(
                        'pdftk failed to uncompress {}. Aborting.\n'.format(filename))
                    raise Exception

                sys.stdout.write("{} uncompress: {} (s).\n".format(
                    filename, time.time() - starttime))

            temp2 = NamedTemporaryFile(delete=False)
            starttime = time.time()
            if not cambridge:
                remove_watermark_objects(
                    open(temp1.name, 'r+b'), temp2, needle)
            else:
                remove_watermark_cambridge(open(filename, 'r+b'), temp2)
            sys.stdout.write('{} removed watermark: {:.3f} sec\n'.format(
                filename, time.time() - starttime))
            temp2.close()

            outfilename = get_outfilename(filename, overwrite)
            if compress:
                starttime = time.time()
                exitcode = subprocess.call(
                    ['pdftk', temp2.name, 'output', outfilename, 'compress'])
                if exitcode != 0:
                    sys.stderr.write(
                        'pdftk failed to compress processed file. Aborting.\n')
                    raise Exception

                sys.stdout.write('{} compress: {} (s).\n'.format(
                    outfilename, time.time() - starttime))
            else:
                shutil.copyfile(temp2.name, outfilename)
        except Exception:
            try:
                os.unlink(temp1.name)
            except (NameError, OSError):
                pass
            try:
                os.unlink(temp2.name)
            except (NameError, OSError):
                pass
            continue
        try:
            os.unlink(temp1.name)
        except (NameError, OSError):
            pass
        try:
            os.unlink(temp2.name)
        except (NameError, OSError):
            pass
