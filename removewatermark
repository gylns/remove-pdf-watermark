#!/usr/bin/env python3
import io
import os
import re
import subprocess
import sys
import time

from tempfile import NamedTemporaryFile
from os import path

objstart = re.compile(b'^\d+ \d+ obj\s*$', re.MULTILINE)


def writebuffer(fh, buffer):
    for line in buffer:
        fh.write(line)


def remove_watermark_objects(infile, outfile, needle):
    '''Searches through infile for needle and removes its innermost containing object.
    Writes to outfile. infile must have been opened in binary mode and outfile must
    have been opened in binary mode.'''
    buffer = b''
    for line in infile.readlines():
        # Note that this will only ever strip the innermost object
        # We don't deal with nested objects and so cannot strip an
        # outer object
        if not line.startswith(b'endobj'):
            buffer += line
        else:
            if not needle in buffer:
                outfile.write(buffer)
            else:
                it = re.finditer(objstart, buffer)
                m = None
                for m in it:
                    pass
                if m != None:
                    outfile.write(buffer[:m.start()])
            buffer = b''
    outfile.write(buffer)


def get_outfilename(infilename, overwrite):
    if overwrite:
        return infilename
    if infilename[-4:] == '.pdf':
        return '{}.scrubbed.pdf'.format(infilename[:-4])
    return infilename + '.scrubbed'


if __name__ == '__main__':
    usage = 'Usage: {0} <watermark text> filename [filenames...]\n'.format(
        sys.argv[0])
    try:
        needle = bytes(sys.argv[1], 'latin-1')
    except IndexError:
        sys.stderr.write(usage)
        sys.exit(1)

    if len(sys.argv) < 3:
        sys.stderr.write(usage)
        sys.exit(1)

    overwrite = False

    if sys.argv[2] == '--overwrite':
        overwrite = True

    for filename in sys.argv[2:]:
        if not path.exists(filename):
            if not overwrite:
                sys.stderr.write('File does not exist: %s\n' % filename)
            continue

        try:
            # 1. Uncompress the file so we can find the watermark text.
            temp1 = NamedTemporaryFile(delete=False)
            temp1.close()

            starttime = time.time()
            exitcode = subprocess.call(
                ['pdftk', filename, 'output', temp1.name, 'uncompress'])
            if exitcode != 0:
                sys.stderr.write(
                    'pdftk failed to uncompress {}. Aborting.\n'.format(filename))
                raise Exception
            sys.stdout.write('{} uncompressed: {:.3f} sec\n'.format(
                filename, time.time() - starttime))

            temp2 = NamedTemporaryFile(delete=False)
            starttime = time.time()
            remove_watermark_objects(open(temp1.name, 'r+b'), temp2, needle)
            sys.stdout.write('{} removed watermark: {:.3f} sec\n'.format(
                filename, time.time() - starttime))
            temp2.close()

            outfilename = get_outfilename(filename, overwrite)
            starttime = time.time()
            exitcode = subprocess.call(
                ['pdftk', temp2.name, 'output', outfilename, 'compress'])
            if exitcode != 0:
                sys.stderr.write(
                    'pdftk failed to compress processed file. Aborting.\n')
                raise Exception
            sys.stdout.write('{} compressed: {:.3f} sec\n'.format(
                filename, time.time() - starttime))

            print('Writing scrubbed file to %s' % outfilename)
        except Exception:
            try:
                os.unlink(temp1.name)
            except (NameError, OSError):
                pass
            try:
                os.unlink(temp2.name)
            except (NameError, OSError):
                pass
            continue
        try:
            os.unlink(temp1.name)
        except (NameError, OSError):
            pass
        try:
            os.unlink(temp2.name)
        except (NameError, OSError):
            pass
